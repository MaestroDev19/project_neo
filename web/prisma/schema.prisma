datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id               String              @id @default(cuid())
  email            String              @unique
  username         String              @unique
  displayName      String
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  events           Event[]             @relation("OrganizerEvents")
  memberships      Membership[]
  posts            Post[]
  ownedCommunities Community[]         @relation("CommunityOwner")
  eventAttendances EventAttendee[]
  followingCount   Int                 @default(0)
  favorites        FavoriteCommunity[]
}

model Event {
  id          String          @id @default(cuid())
  title       String
  description String
  startsAt    DateTime
  endsAt      DateTime
  location    String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  organizer   User            @relation("OrganizerEvents", fields: [organizerId], references: [id])
  organizerId String
  attendees   EventAttendee[]
  community   Community?      @relation(fields: [communityId], references: [id])
  communityId String?
  tags        EventTag[]
  streams     Stream[]
  capsule     EventCapsule?
}

model Community {
  id          String              @id @default(cuid())
  name        String              @unique
  slug        String              @unique
  description String?
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  owner       User                @relation("CommunityOwner", fields: [ownerId], references: [id])
  ownerId     String
  members     Membership[]
  events      Event[]
  posts       Post[]
  streams     Stream[]
  favoritedBy FavoriteCommunity[]
}

model Membership {
  id          String         @id @default(cuid())
  user        User           @relation(fields: [userId], references: [id])
  userId      String
  community   Community      @relation(fields: [communityId], references: [id])
  communityId String
  role        MembershipRole @default(MEMBER)
  createdAt   DateTime       @default(now())

  @@unique([userId, communityId])
}

enum MembershipRole {
  OWNER
  ADMIN
  MODERATOR
  MEMBER
}

model EventAttendee {
  id       String   @id @default(cuid())
  event    Event    @relation(fields: [eventId], references: [id])
  eventId  String
  user     User     @relation(fields: [userId], references: [id])
  userId   String
  rsvp     RSVP     @default(MAYBE)
  joinedAt DateTime @default(now())

  @@unique([eventId, userId])
}

enum RSVP {
  YES
  NO
  MAYBE
}

model Post {
  id          String    @id @default(cuid())
  community   Community @relation(fields: [communityId], references: [id])
  communityId String
  author      User      @relation(fields: [authorId], references: [id])
  authorId    String
  content     String
  type        PostType  @default(TEXT)
  mediaUrl    String?
  mediaType   String?
  externalUrl String?
  createdAt   DateTime  @default(now())
}

enum PostType {
  TEXT
  MEDIA
  REVIEW
  NEWS
  EVENT_ANNOUNCEMENT
  STREAM_HIGHLIGHT
}

model Tag {
  id     String     @id @default(cuid())
  name   String     @unique
  events EventTag[]
}

model EventTag {
  id      String @id @default(cuid())
  event   Event  @relation(fields: [eventId], references: [id])
  eventId String
  tag     Tag    @relation(fields: [tagId], references: [id])
  tagId   String

  @@unique([eventId, tagId])
}

model Stream {
  id             String         @id @default(cuid())
  platform       StreamPlatform
  externalId     String
  title          String
  scheduledStart DateTime?
  startedAt      DateTime?
  endedAt        DateTime?
  url            String
  createdAt      DateTime       @default(now())
  event          Event?         @relation(fields: [eventId], references: [id])
  eventId        String?
  community      Community?     @relation(fields: [communityId], references: [id])
  communityId    String?

  @@index([platform, externalId])
}

enum StreamPlatform {
  TWITCH
  YOUTUBE
}

model EventCapsule {
  id        String   @id @default(cuid())
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   String   @unique
  title     String
  summary   String?
  coverUrl  String?
  createdAt DateTime @default(now())
}

model FavoriteCommunity {
  id          String    @id @default(cuid())
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  community   Community @relation(fields: [communityId], references: [id])
  communityId String
  createdAt   DateTime  @default(now())

  @@unique([userId, communityId])
}
